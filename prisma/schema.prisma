// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int             @id @default(autoincrement())
  status            Status          @default(ACTIVATE)
  permissionCreated Permission[]    @relation(name: "CreatedUser")
  permissionUpdated Permission[]    @relation(name: "UpdatedUser")
  projectCreated    Project[]       @relation(name: "CreatedUser")
  projectUpdated    Project[]       @relation(name: "UpdatedUser")
  projects          ProjectMember[] @relation(name: "ProjectMemberToUser")
  roleCreated       Role[]          @relation(name: "CreatedUser")
  roleUpdated       Role[]          @relation(name: "UpdatedUser")
  stateCreated      State[]         @relation(name: "CreatedUser")
  stateUpdated      State[]         @relation(name: "UpdatedUser")
  testCaseAssignee  TestCase[]      @relation(name: "AssigneeUser")
  testCaseAssigner  TestCase[]      @relation(name: "AssignerUser")
  testCaseCreated   TestCase[]      @relation(name: "CreatedUser")
  testCaseUpdated   TestCase[]      @relation(name: "UpdatedUser")
  testDataCreated   TestData[]      @relation(name: "CreatedUser")
  testDataUpdated   TestData[]      @relation(name: "UpdatedUser")
  testStepCreated   TestStep[]      @relation(name: "CreatedUser")
  testStepUpdated   TestStep[]      @relation(name: "UpdatedUser")
  fullName          String
  dayOfBirth        DateTime
  email             String
  passwords         String

  @@map("users")
}

model Role {
  id          Int              @id @default(autoincrement())
  status      Status           @default(ACTIVATE)
  members     PermissionRole[] @relation(name: "PermissionRoleToRole")
  name        String
  description String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdById Int
  updatedById Int
  createdBy   User             @relation(name: "CreatedUser", fields: [createdById], references: [id])
  updatedBy   User             @relation(name: "UpdatedUser", fields: [updatedById], references: [id])

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement())
  status      Status           @default(ACTIVATE)
  name        String
  resources   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdById Int
  updatedById Int
  createdBy   User             @relation(name: "CreatedUser", fields: [createdById], references: [id])
  updatedBy   User             @relation(name: "UpdatedUser", fields: [updatedById], references: [id])
  roles       PermissionRole[] @relation(name: "PermissionToPermissionRole")

  @@map("permisstions")
}

model Project {
  id          Int             @id @default(autoincrement())
  status      Status          @default(ACTIVATE)
  name        String
  description String
  estimate    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdById Int
  updatedById Int
  stateId     Int
  createdBy   User            @relation(name: "CreatedUser", fields: [createdById], references: [id])
  updatedBy   User            @relation(name: "UpdatedUser", fields: [updatedById], references: [id])
  state       State           @relation(name: "ProjectState", fields: [stateId], references: [id])
  members     ProjectMember[] @relation(name: "ProjectToProjectMember")
  testCase    TestCase[]      @relation(name: "TestCaseProject")

  @@map("projects")
}

model ProjectMember {
  id         Int      @id @default(autoincrement())
  status     Status   @default(ACTIVATE)
  project    Project  @relation(name: "ProjectToProjectMember", fields: [projectId], references: [id])
  projectId  Int
  user       User     @relation(name: "ProjectMemberToUser", fields: [userId], references: [id])
  userId     Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@map("project_members")
}

model TestCase {
  id             Int            @id @default(autoincrement())
  status         Status         @default(ACTIVATE)
  name           String
  description    String
  estimate       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  preConditionId String
  expectResult   String
  outcome        Boolean
  createdById    Int
  updatedById    Int
  assigneeId     Int
  assignerId     Int
  projectId      Int
  stateId        Int
  assignee       User           @relation(name: "AssigneeUser", fields: [assigneeId], references: [id])
  assigner       User           @relation(name: "AssignerUser", fields: [assignerId], references: [id])
  createdBy      User           @relation(name: "CreatedUser", fields: [createdById], references: [id])
  updatedBy      User           @relation(name: "UpdatedUser", fields: [updatedById], references: [id])
  project        Project        @relation(name: "TestCaseProject", fields: [projectId], references: [id])
  state          State          @relation(name: "TestCaseState", fields: [stateId], references: [id])
  TestCaseData   TestCaseData[] @relation(name: "TestCaseToTestCaseData")
  TestCaseStep   TestCaseStep[] @relation(name: "TestCaseToTestCaseStep")

  @@map("test_cases")
}

model TestStep {
  id           Int            @id @default(autoincrement())
  status       Status         @default(ACTIVATE)
  TestCaseStep TestCaseStep[] @relation(name: "TestCaseStepToTestStep")
  name         String
  description  String
  order        Int
  content      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdById  Int
  updatedById  Int
  createdBy    User           @relation(name: "CreatedUser", fields: [createdById], references: [id])
  updatedBy    User           @relation(name: "UpdatedUser", fields: [updatedById], references: [id])

  @@map("test_steps")
}

model TestCaseStep {
  id         Int      @id @default(autoincrement())
  status     Status   @default(ACTIVATE)
  testCaseId Int
  stepId     Int
  testCase   TestCase @relation(name: "TestCaseToTestCaseStep", fields: [testCaseId], references: [id])
  step       TestStep @relation(name: "TestCaseStepToTestStep", fields: [stepId], references: [id])
  assignedAt DateTime @default(now())

  @@map("test_case_steps")
}

model TestData {
  id           Int            @id @default(autoincrement())
  status       Status         @default(ACTIVATE)
  TestCaseData TestCaseData[] @relation(name: "TestCaseDataToTestData")
  name         String
  description  String
  value        String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdById  Int
  updatedById  Int
  createdBy    User           @relation(name: "CreatedUser", fields: [createdById], references: [id])
  updatedBy    User           @relation(name: "UpdatedUser", fields: [updatedById], references: [id])

  @@map("test_data")
}

model TestCaseData {
  id         Int      @id @default(autoincrement())
  status     Status   @default(ACTIVATE)
  testCaseId Int
  dataId     Int
  testCase   TestCase @relation(name: "TestCaseToTestCaseData", fields: [testCaseId], references: [id])
  data       TestData @relation(name: "TestCaseDataToTestData", fields: [dataId], references: [id])
  assignedAt DateTime @default(now())

  @@map("test_case_datas")
}

model PermissionRole {
  role         Role       @relation(name: "PermissionRoleToRole", fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(name: "PermissionToPermissionRole", fields: [permissionId], references: [id])
  permissionId Int
  assignedAt   DateTime   @default(now())
  assignedBy   String

  @@id([roleId, permissionId])
  @@map("permission_roles")
}

model State {
  id            Int        @id @default(autoincrement())
  projectState  Project[]  @relation(name: "ProjectState")
  name          String
  description   String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  createdById   Int
  updatedById   Int
  createdBy     User       @relation(name: "CreatedUser", fields: [createdById], references: [id])
  updatedBy     User       @relation(name: "UpdatedUser", fields: [updatedById], references: [id])
  testCaseState TestCase[] @relation(name: "TestCaseState")

  @@map("states")
}

enum Status {
  ACTIVATE
  DEACTIVATE
}
